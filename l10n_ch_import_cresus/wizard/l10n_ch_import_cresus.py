# -*- coding: utf-8 -*-
##############################################################################
#
#    Author Vincent Renaville
#    Copyright 2015 Camptocamp SA
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import sys
import traceback
import base64
import csv
import tempfile
from openerp import models, fields, api, exceptions
from openerp.tools.translate import _
from itertools import izip_longest
from datetime import datetime


class AccountCresusImport(models.TransientModel):
    _name = 'account.cresus.import'
    _description = 'Export Accounting'

    company_id = fields.Many2one('res.company', 'Company',
                                 invisible=True)
    report = fields.Text(
        'Report',
        readonly=True
        )
    journal_id = fields.Many2one('account.journal', 'Journal',
                                 required=True)
    state = fields.Selection(selection=[('draft', "Draft"),
                                        ('done', "Done"),
                                        ('error', "Error")],
                        readonly=True,
                        default='draft'
                        )
    file = fields.Binary(
        'File',
        required=True
        )
    imported_move_ids = fields.Many2many(
        'account.move', 'import_cresus_move_rel',
        string='Imported moves')

    help_html = fields.Html('Import help', readonly=True,
                            default=_('''
                 In order to import your 'Cresus Salaires' .txt \
                 file you must complete the following requirements: <ul>
                 <li> The accounts, analytical accounts used in the Cresus \
                 file must be previously created into Odoo. </li>
                 <li> If the Cresus file uses VAT codes (i.e: IPI), \
                 please make sure you have indicated this code in the \
                 related Odoo tax (new field). \
                 Warning, the Odoo tax must be 'tax included'. \
                 If the tax does not exist you have to create it. </li>
                 <li> All PL accounts must have include_initial_balance = False \
                 (meaning: no balance brought forward in the new fiscal year) \
                 and all balance sheet accounts must have include_initial_balance \
                 = True.\
                 </li></ul>'''))

    HEAD_CRESUS = ['date', 'debit', 'credit', 'pce',
                   'ref', 'amount', 'typtvat', 'currency_amount',
                   'analytic_account']
    HEAD_ODOO = ['ref', 'date', 'journal_id',
                 'line_ids/account_id', 'line_ids/partner_id', 'line_ids/name',
                 'line_ids/debit', 'line_ids/credit',
                 'line_ids/tax_line_id',
                 'line_ids/analytic_account_id']

    @api.multi
    def open_account_moves(self):
        res = {
            'domain': str([('id', 'in', self.imported_move_ids.ids)]),
            'name': 'Account Move',
            'view_type': 'form',
            'view_mode': 'tree,form',
            'res_model': 'account.move',
            'view_id': False,
            'type': 'ir.actions.act_window',
        }
        return res

    def format_messages(self, messages):
        """Format error messages generated by the BaseModel.load method

        :param messages: return of BaseModel.load messages key
        :returns: formatted string

        """
        res = []
        for msg in messages:
            rows = msg.get('rows', {})
            res.append(_("%s. -- Field: %s -- rows %s to %s") % (
                msg.get('message', 'N/A'),
                msg.get('field', 'N/A'),
                rows.get('from', 'N/A'),
                rows.get('to', 'N/A'))
            )
        return "\n \n".join(res)

    def _parse_csv(self):
        """Parse stored CSV file in order to be usable by BaseModel.load method.

        Manage base 64 decoding.

        :param imp_id: current importer id
        :returns: (head [list of first row], data [list of list])

        """
        # We use tempfile in order to avoid memory error with large files
        with tempfile.TemporaryFile() as src:
            content = self.file
            delimiter = '\t'
            src.write(content)
            with tempfile.TemporaryFile() as decoded:
                src.seek(0)
                base64.decode(src, decoded)
                decoded.seek(0)
                return self._prepare_csv_data(decoded, delimiter)

    def _prepare_csv_data(self, csv_file, delimiter=","):
        """Parse a decoded CSV file and return head list and data list

        :param csv_file: decoded CSV file
        :param delimiter: CSV file delimiter char
        :returns: (head [list of first row], data [list of list])

        """
        try:
            data = csv.DictReader(csv_file, fieldnames=self.HEAD_CRESUS,
                                  delimiter=delimiter)
        except csv.Error as error:
            raise exceptions.Warning(
                _('CSV file is malformed'),
                _("Please choose the correct separator \n"
                  "the error detail is : \n %s") % repr(error)
            )
        # Generator does not work with orm.BaseModel.load
        values = [x for x in data if x]

        return (values)

    def _manage_load_results(self, result):
        """Manage the BaseModel.load function output and store exception.

        Will generate success/failure report and store it into report field.
        Manage commit and rollback even if load method uses PostgreSQL
        Savepoints.

        :param result: BaseModel.load returns
                       {ids: list(int)|False, messages: [Message]}
        """
        # Import sucessful
        if not result['messages']:
            self.state = 'done'
            self.report = _("Lines imported")
            self.imported_move_ids = result['ids']
        else:
            self.report = self.format_messages(result['messages'])
            self.state = 'error'

    def _parse_date(self, date_string):
        """Parse a date coming from Cresus and put it in the format used by Odoo.

           Both 01-01-70 and 01-01-1970 have been sighted in Cresus' output.

           :param date_string: cresus data
           :returns: a date string
        """
        for format in ['%d.%m.%y', '%d.%m.%Y']:
            try:
                dt = datetime.strptime(date_string, format)
                break
            except ValueError:
                continue
        else:
            return False
        return fields.Date.to_string(dt)

    @api.multi
    def _standardise_data(self, data):
        """ split accounting lines where needed

            Cresus writes one csv line per move when there are just two lines
            (take some money from one account and put all of it in another),
            and uses ellipses in more complex cases. What matters is the pce label,
            which is the same on all lines of a move.
        """
        new_openerp_data = []
        tax_obj = self.env['account.tax']
        account_obj = self.env['account.account']
        cp = self.env.user.company_id
        company_partner = cp.partner_id.name
        standard_dict = dict(izip_longest(self.HEAD_ODOO, []))
        previous_date = False
        previous_pce = False
        for index, line_cresus in enumerate(data, 1):
            current_date = self._parse_date(line_cresus['date'])
            if not current_date:
                raise ValueError("Invalid date -- row %s." % index)
            default_value = standard_dict.copy()
            default_value['line_ids/name'] = line_cresus['ref']

            if (not previous_pce) or previous_pce != line_cresus['pce']:
                default_value.update({'date': current_date,
                                      'ref': line_cresus['pce'],
                                      'journal_id': self.journal_id.name
                                      })
                previous_pce = line_cresus['pce']
            else:
                default_value.update({'date': None,
                                      'ref': None,
                                      'journal_id': None})

            is_negative = False
            decimal_amount = float(
                line_cresus['amount'].replace('\'', '').replace(' ', ''))
            if decimal_amount < 0:
                is_negative = True

            if line_cresus['debit'] != '...':
                if is_negative:
                    default_value.update({'line_ids/credit': abs(decimal_amount),
                                          'line_ids/debit': 0.0,
                                          'line_ids/account_id':
                                          line_cresus['debit']})
                else:
                    default_value.update({'line_ids/debit': abs(decimal_amount),
                                          'line_ids/credit': 0.0,
                                          'line_ids/account_id':
                                          line_cresus['debit']})
                tax_code = None
                analytic_code = None
                tax_code_inverted = None
                tax_current = None
                analytic_code_inverted = None
                if line_cresus['typtvat']:
                    tax_current = tax_obj.search([('tax_cresus_mapping',
                                                   '=',
                                                   line_cresus['typtvat']),
                                                  ('price_include', '=', True)],
                                                 limit=1)
                if tax_current or line_cresus['analytic_account']:
                    current_account = account_obj.search(
                        [('code', '=', default_value['line_ids/account_id'])],
                        limit=1)
                    if current_account:
                        # Search for account that have a deferal method
                        if current_account.user_type_id.include_initial_balance == False:
                            if tax_current:
                                tax_code = tax_current.name
                            analytic_code = line_cresus['analytic_account']
                default_value.update({'line_ids/tax_line_id': tax_code,
                                      'line_ids/partner_id': company_partner,
                                      'line_ids/analytic_account_id':
                                      analytic_code})
                new_openerp_data.append(default_value)

            #
            # Generated the second line inverted
            #

            if line_cresus['credit'] != '...':
                inverted_default_value = default_value.copy()
                inverted_default_value.update({'date': None,
                                               'ref': None,
                                               'journal_id': None})
                if is_negative:
                    inverted_default_value.update({'line_ids/debit':
                                                   abs(decimal_amount),
                                                   'line_ids/credit': 0.0,
                                                   'line_ids/account_id':
                                                   line_cresus['credit']})
                else:
                    inverted_default_value.update({'line_ids/debit': 0.0,
                                                   'line_ids/credit':
                                                   abs(decimal_amount),
                                                   'line_ids/account_id':
                                                   line_cresus['credit']})
                    # Search for account that have a deferal method
                if tax_current or line_cresus['analytic_account']:
                    current_account = account_obj.search([
                        ('code', '=',
                         inverted_default_value.get('line_ids/account_id'))])
                    if current_account:
                        if current_account.user_type_id.include_initial_balance == False:
                            if tax_current:
                                tax_code_inverted = tax_current['name']
                        analytic_code_inverted = line_cresus['analytic_account']
                inverted_default_value.update({'line_ids/tax_line_id':
                                               tax_code_inverted,
                                              'line_ids/analytic_account_id':
                                               analytic_code_inverted})
                new_openerp_data.append(inverted_default_value)

        return new_openerp_data

    @api.multi
    def _load_data(self, data):
        """Function that does the load of parsed CSV file.

        :param data: CSV file content (list of data list)
        """
        # Change data from dict to list of array
        data_array = []
        for data_item_dict in data:
            data_item = []
            for item in self.HEAD_ODOO:
                data_item.append(data_item_dict[item])
            data_array.append(data_item)
        try:
            res = self.env['account.move'].load(self.HEAD_ODOO,
                                                data_array)

            self._manage_load_results(res)
        except Exception as exc:
            ex_type, sys_exc, tb = sys.exc_info()
            tb_msg = ''.join(traceback.format_tb(tb, 30))
            self.report = _("Unexpected exception.\n %s \n %s" %
                            (repr(exc), tb_msg))
            self.state = 'error'
        finally:
            if self.state == 'error':
                self.env.cr.rollback()
                self.write({'report': self.report, 'state': self.state})
        return {'type': 'ir.actions.act_window',
                'res_model': 'account.cresus.import',
                'res_id': self.id,
                'view_type': 'form',
                'view_mode': 'form',
                'target': 'new'}

    @api.multi
    def import_file(self):
        data = self._parse_csv()
        new_data = self._standardise_data(data)
        return self._load_data(new_data)
